format_version: "2"
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
  - STEP_VERSION: 1.18.14

  - SAMPLE_APP_URL: https://github.com/bitrise-samples/sample-apps-ios-simple-objc-with-uitest.git
  - BITRISE_PROJECT_PATH: ios-simple-objc/ios-simple-objc.xcodeproj
  - BITRISE_SCHEME: ios-simple-objc

workflows:
  # ----------------------------------------------------------------
  # --- workflow to Step Test
  ci:
    before_run:
    - go-tests
    after_run:
    - ci-objc
    - ci-xcode-8

  ci-objc:
    envs:
    - SAMPLE_APP_URL: https://github.com/bitrise-io/sample-apps-ios-simple-objc.git
    - BITRISE_PROJECT_PATH: ios-simple-objc/ios-simple-objc.xcodeproj
    - BITRISE_SCHEME: ios-simple-objc
    before_run:
    - test

  ci-xcode-8:
    envs:
    - SAMPLE_APP_URL: https://github.com/bitrise-samples/ios-xcode-8.0.git
    - BITRISE_PROJECT_PATH: ios-xcode-8.0/ios-xcode-8.0.xcodeproj
    - BITRISE_SCHEME: ios-xcode-8.0
    before_run:
    - test

  test:
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v
            rm -rf ./_tmp
    - change-workdir:
        title: Switch working dir to test / _tmp dir
        run_if: true
        inputs:
        - path: ./_tmp
        - is_create_path: true
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v
            git clone $SAMPLE_APP_URL .
    - certificate-and-profile-installer: {}
    - path::./:
        inputs:
        - output_tool: xcodebuild
        # - is_clean_build: "no"
        - is_clean_build: "yes"
        - build_without_testing: "no"
        - test_without_building: "no"
        - generate_code_coverage_files: "no"
        # - generate_code_coverage_files: "yes"
        - simulator_device: iPhone 6
        # - simulator_device: Apple TV 1080p
        # - simulator_platform: tvOS Simulator
        - should_build_before_test: "yes"
        - xcodebuild_test_options: -verbose
        - export_uitest_artifacts: "true"
    - script:
        title: Output test
        is_always_run: true
        inputs:
        - content: |-
            echo "BITRISE_XCODE_TEST_RESULT: ${BITRISE_XCODE_TEST_RESULT}"
            if [ ! -f "$BITRISE_XCODE_RAW_TEST_RESULT_TEXT_PATH" ] ; then
              echo "No BITRISE_XCODE_RAW_TEST_RESULT_TEXT_PATH file generated!"
              exit 1
            fi
            echo "BITRISE_XCODE_RAW_TEST_RESULT_TEXT_PATH: ${BITRISE_XCODE_RAW_TEST_RESULT_TEXT_PATH}"
            echo "BITRISE_XCODE_TEST_ATTACHMENTS_PATH: ${BITRISE_XCODE_TEST_ATTACHMENTS_PATH}"

  go-tests:
    before_run:
    - _install-test-tools
    steps:
    - script:
        title: Export go files to test
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            no_vendor_paths="$(go list ./... | grep -v vendor)"
            envman add --key GOLIST_WITHOUT_VENDOR --value "$no_vendor_paths"
    - script:
        title: Err check
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            errcheck -asserts=true -blank=true $GOLIST_WITHOUT_VENDOR
    - script:
        title: Go lint
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            while read -r line; do
              echo "-> Linting: $line"
              golint_out="$(golint $line)"
              if [[ "${golint_out}" != "" ]] ; then
                echo "=> Golint issues found:"
                echo "${golint_out}"
                exit 1
              fi
            done <<< "$GOLIST_WITHOUT_VENDOR"
    - script:
        title: Go test
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            go test $(go list ./... | grep -v vendor)

  _install-test-tools:
    steps:
    - script:
        title: Install required testing tools
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            # Check for unhandled errors
            go get -u -v github.com/kisielk/errcheck

            # Go lint
            go get -u -v github.com/golang/lint/golint

  # ----------------------------------------------------------------
  # --- Utility workflows
  dep-update:
    title: Dep update
    description: |
      Used for updating bitrise dependencies with dep
    steps:
    - script:
        title: Dependency update
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            go get -u -v github.com/golang/dep/cmd/dep
            dep ensure -v
            dep ensure -v -update

  # ----------------------------------------------------------------
  # --- workflows to create Release
  create-release:
    steps:
    - script:
        title:
        inputs:
        - content: |
            #!/bin/bash
            set -ex
            go get -u github.com/bitrise-tools/releaseman
            export CI=true
            releaseman create --version $STEP_VERSION

  # ----------------------------------------------------------------
  # --- workflow to Share this step into a Step Library
  audit-this-step:
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            stepman audit --step-yml ./step.yml

  
